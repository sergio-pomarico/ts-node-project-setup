import { Router } from 'express';
import { TODOsController } from '#presentation/controllers/todos';
import { createTodoSchema, updateTodoSchema } from '#presentation/schemas/todo';
import { schemaValidation } from '#presentation/middlewares/todo';
import container from '#infrastructure/dependencies/container';

export class TODOsRoutes {
  constructor(public readonly router = Router()) {
    this.controller = container.get<TODOsController>('TODOsController');
    this.routes();
  }

  private readonly controller: TODOsController;

  /**
   * @swagger
   * components:
   *  parameters:
   *    id:
   *      in: path
   *      name: id
   *      required: true
   *      schema:
   *        type: string
   *        description: uuid of TODO
   *  schemas:
   *    TODO:
   *      type: object
   *      properties:
   *        id:
   *          type: string
   *          description: autogenerated uuid of task
   *        title:
   *          type: string
   *          description: title of task
   *        dueDate:
   *          type: string
   *          description: due date of task
   *      required:
   *        - title
   *        - dueDate
   *      example:
   *        id: b17d19b3-2457-498b-89f0-206ffb463ecd
   *        title: Task 1
   *        dueDate: 2024-04-19T01:24:40.591Z
   *    Error:
   *      type: object
   *      properties:
   *        status:
   *          type: string
   *          description: status of response
   *        statusCode:
   *          type: number
   *          description: http code of response
   *        error:
   *          type: object
   *          properties:
   *            message:
   *              type: string
   *            code:
   *              type: string
   *            description:
   *              type: string
   *    Payload:
   *      type: object
   *      properties:
   *        title:
   *          type: string
   *          description: title of TODO
   *        dueDate:
   *          type: string
   *          description: due date of TODO
   *        completed:
   *          type: boolean
   *          description: status of TODO
   *      example:
   *        title: Task 1
   *        dueDate: 2024-04-19T01:24:40.591Z
   *        completed: false
   */

  /**
   * @swagger
   * tags:
   *  name: TODOs
   *  description: TODOs endpoints
   */

  routes(): void {
    /**
     * @swagger
     * /todo:
     *  get:
     *   summary: Get all TODOs
     *   tags: [TODO]
     *   responses:
     *    200:
     *      description: list of TODOs
     *      content:
     *        application/json:
     *          schema:
     *            type: object
     *            properties:
     *              status:
     *                type: string
     *                description: status of response
     *              todos:
     *                type: array
     *                items:
     *                  type: object
     *                  $ref: '#/components/schemas/TODO'
     *    500:
     *      description: internal server error
     *      content:
     *        application/json:
     *          schema:
     *            type: object
     *            $ref: '#/components/schemas/Error'
     */
    this.router.get('/', this.controller.all);

    /**
     * @swagger
     * /todo/{id}:
     *  get:
     *   summary: Get a TODO
     *   tags: [TODO]
     *   parameters:
     *    - $ref: '#/components/parameters/id'
     *   responses:
     *    200:
     *      description: get a TODO by id
     *      content:
     *        application/json:
     *          schema:
     *            type: object
     *            properties:
     *              status:
     *                type: string
     *                description: status of response
     *              todo:
     *                type: object
     *                $ref: '#/components/schemas/TODO'
     *    404:
     *      description: TODO not found
     *      content:
     *        application/json:
     *          schema:
     *            type: object
     *            $ref: '#/components/schemas/Error'
     *
     */
    this.router.get('/:id', this.controller.getById);

    /**
     * @swagger
     * /todo:
     *  post:
     *   summary: create a new TODO
     *   tags: [TODO]
     *   requestBody:
     *    required: true
     *    content:
     *      application/json:
     *        schema:
     *          $ref: '#/components/schemas/Payload'
     *   responses:
     *    200:
     *      description: get TODO created
     *      content:
     *        application/json:
     *          schema:
     *            type: object
     *            $ref: '#/components/schemas/TODO'
     */
    this.router.post(
      '/',
      schemaValidation(createTodoSchema),
      this.controller.create,
    );

    /**
     * @swagger
     * /todo/{id}:
     *  put:
     *   summary: Update a TODO
     *   tags: [TODO]
     *   requestBody:
     *    required: true
     *    content:
     *      application/json:
     *        schema:
     *          $ref: '#/components/schemas/Payload'
     *   parameters:
     *    - $ref: '#/components/parameters/id'
     *   responses:
     *    200:
     *      description: get a TODO updated
     *      content:
     *        application/json:
     *          schema:
     *            type: object
     *            properties:
     *              status:
     *                type: string
     *                description: status of response
     *              todo:
     *                type: object
     *                $ref: '#/components/schemas/TODO'
     *    404:
     *      description: TODO not found
     *      content:
     *        application/json:
     *          schema:
     *            type: object
     *            $ref: '#/components/schemas/Error'
     *
     */
    this.router.put(
      '/:id',
      schemaValidation(updateTodoSchema),
      this.controller.update,
    );
    /**
     * @swagger
     * /todo/{id}:
     *  delete:
     *   summary: Delete a TODO
     *   tags: [TODO]
     *   parameters:
     *    - $ref: '#/components/parameters/id'
     *   responses:
     *    200:
     *      description: get a TODO deleted
     *      content:
     *        application/json:
     *          schema:
     *            type: object
     *            properties:
     *              status:
     *                type: string
     *                description: status of response
     *              todo:
     *                type: object
     *                $ref: '#/components/schemas/TODO'
     *    404:
     *      description: TODO not found
     *      content:
     *        application/json:
     *          schema:
     *            type: object
     *            $ref: '#/components/schemas/Error'
     *
     */
    this.router.delete('/:id', this.controller.delete);
  }
}
